
####
## Output descriptions:
##

# Treasure Data (http://www.treasure-data.com/) provides cloud based data
# analytics platform, which easily stores and processes data from td-agent.
# FREE plan is also provided.
# @see http://docs.fluentd.org/articles/http-to-td
#
# This section matches events whose tag is td.DATABASE.TABLE
#<match td.*.*>
#  type tdlog
#  apikey YOUR_API_KEY
#
#  auto_create_table
#  buffer_type file
#  buffer_path /var/log/td-agent/buffer/td
#</match>

## match tag=debug.** and dump to console
<match debug.**>
  type stdout
</match>

####
## Source descriptions:
##

## built-in TCP input
## @see http://docs.fluentd.org/articles/in_forward
<source>
  type forward
</source>

## built-in UNIX socket input
#<source>
#  type unix
#</source>

# HTTP input
# POST http://localhost:8888/<tag>?json=<json>
# POST http://localhost:8888/td.myapp.login?json={"user"%3A"me"}
# @see http://docs.fluentd.org/articles/in_http
<source>
  type http
  port 8888
</source>

## live debugging agent
<source>
  type debug_agent
  bind 127.0.0.1
  port 24230
</source>

## syslog
<source>
  type syslog
  port 5014
  bind 0.0.0.0
  tag system
  with_priority true
</source>

## # http://www.fluentd.org/guides/recipes/parse-syslog
## <match system.**>
##   type rewrite_tag_filter
##   rewriterule1 ident ^sudo$  sudo  # sudo events
##   rewriterule2 ident ^auth$  auth  # auth events
##   rewriterule3 ident .*      clear # everyone else
## </match>
## 
## # This one matches for the exact sudo syslog messages that we want to parse
## # and re-tags it with "sudo_parse_it"
## <match sudo>
##   type rewrite_tag_filter
##   rewriterule1 message PWD=[^ ]+ ; USER=[^ ]+ ; COMMAND=.*$ sudo_parse_it
##   rewriterule2 message .* clear
## </match>
## 
## # This one parses the message field and emits it with the sudoer, password_user and 
## # command. Then, it emits the parsed event with the tag "sudo_parsed"
## <match sudo_parse_it>
##   type parser
##   key_name message # this is the field to be parsed
##   format /PWD=(?<password>[^ ]+) ; USER=(?<sudoer>[^ ]+) ; COMMAND=(?<comamnd>.*)$/
##   tag sudo_parsed
## </match>
## 
## # Finally, emitting the data to stdout to confirm the behavior!
## <match sudo_parsed>
##   type stdout
## </match>

## fluentd monitoring
<source>
  type monitor_agent
  bind 127.0.0.1
  port 24220
</source>

####
## Examples:
##

## File input
## read apache logs continuously and tags td.apache.access
#<source>
#  type tail
#  format apache
#  path /var/log/httpd-access.log
#  tag td.apache.access
#</source>

## File output
## match tag=local.** and write to file
#<match local.**>
#  type file
#  path /var/log/td-agent/access
#</match>

## Forwarding
## match tag=system.** and forward to another td-agent server
#<match system.**>
#  type forward
#  host 192.168.0.11
#  # secondary host is optional
#  <secondary>
#    host 192.168.0.12
#  </secondary>
#</match>

## Multiple output
## match tag=td.*.* and output to Treasure Data AND file
#<match td.*.*>
#  type copy
#  <store>
#    type tdlog
#    apikey API_KEY
#    auto_create_table
#    buffer_type file
#    buffer_path /var/log/td-agent/buffer/td
#  </store>
#  <store>
#    type file
#    path /var/log/td-agent/td-%Y-%m-%d/%H.log
#  </store>
#</match>


<match system.**>
  type elasticsearch
  host localhost
  port 9200
  include_tag_key true
  tag_key @log_name
  logstash_format true
  flush_interval 10s
  index_name syslog
</match>

<match *>
  type elasticsearch
  host localhost
  port 9200
  include_tag_key true
  tag_key @log_name
  logstash_format true
  flush_interval 10s
  index_name dump
</match>



## output Linux syslog to Elasticsearch
<match src.var.log.messages>
  type elasticsearch
  type_name messages
  logstash_format true
  include_tag_key true
  tag_key @log_name
  flush_interval 10s
  index_name linuxlog
</match>

## output Windows EventLog to Elasticsearch
<match windows.eventlog>
  type elasticsearch
  type_name windows_event_log
  host localhost
  port 9200
  logstash_format true
  include_tag_key true
  tag_key @log_name 
  flush_interval 10s
  index_name windowslog
</match>

## output Windows resource statistics to Elasticsearch
<match map.windows.stats.**>
  type elasticsearch
  type_name windows_stats
  host localhost
  port 9200
  logstash_format true
  include_tag_key true
  tag_key @log_name 
  flush_interval 10s
  index_name windowsstats
</match>

